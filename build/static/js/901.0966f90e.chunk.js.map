{"version":3,"file":"static/js/901.0966f90e.chunk.js","mappings":"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","sources":["components/CreateCar/CreateCar.jsx","Pages/AddCar.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"./CreateCar.css\";\r\nimport { CreateOneCar } from \"../../services/car-api-services\";\r\nimport imageCompression from \"browser-image-compression\";\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string().required(\"Car Name is required\"),\r\n  price: Yup.number().required(\"Price is required\"),\r\n  brand: Yup.string().required(\"Brand is required\"),\r\n  transmission: Yup.string().required(\"Transmission is required\"),\r\n  fuel: Yup.string().required(\"Fuel Type is required\"),\r\n  doors: Yup.number().required(\"Number of Doors is required\"),\r\n});\r\n\r\nconst brands = [\r\n  \"Mercedes\",\r\n  \"BMW\",\r\n  \"Audi\",\r\n  \"Lexus\",\r\n  \"Tesla\",\r\n  \"Bentley\",\r\n  \"Toyota\",\r\n  \"Cadillac Escalade\",\r\n  \"Chevrolet\",\r\n  \"Ferrari\",\r\n  \"Ford\",\r\n  \"GMC\",\r\n  \"Jeep\",\r\n  \"Mini Cooper\",\r\n  \"Nissan\",\r\n  \"Porsche\",\r\n  \"Range Rover\",\r\n  \"Rolls Royce\",\r\n  \"KIA\",\r\n  \"Maserati\",\r\n  \"Yachts\",\r\n  \"Lamborghini\",\r\n];\r\n\r\nconst categories = [\r\n  {\r\n    id: 1,\r\n    name: \"SUVs\",\r\n    createdAt: \"2023-11-04T17:20:41.000Z\",\r\n    updatedAt: \"2023-11-04T17:20:41.000Z\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Luxury Cars\",\r\n    createdAt: \"2023-11-04T17:32:11.000Z\",\r\n    updatedAt: \"2023-11-04T17:32:11.000Z\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Hybrid Cars\",\r\n    createdAt: \"2023-11-04T17:36:41.000Z\",\r\n    updatedAt: \"2023-11-04T17:36:41.000Z\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Sport Cars\",\r\n    createdAt: \"2023-11-04T17:38:13.000Z\",\r\n    updatedAt: \"2023-11-04T17:38:13.000Z\",\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Sedan Cars\",\r\n    createdAt: \"2023-11-04T17:59:45.000Z\",\r\n    updatedAt: \"2023-11-04T17:59:45.000Z\",\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Electric Cars\",\r\n    createdAt: \"2023-11-04T18:02:23.000Z\",\r\n    updatedAt: \"2023-11-04T18:02:23.000Z\",\r\n  },\r\n];\r\n\r\nconst transmissions = [\"Automatic\", \"Manual\"];\r\nconst fuelTypes = [\"Petrol\", \"Diesel\", \"Electric\"];\r\nfunction CreateCar() {\r\n  const handleIcon = async (e, setFieldValue) => {\r\n    const file = e.target.files[0];\r\n    const options = {\r\n      maxSizeMB: 1,\r\n      maxWidthOrHeight: 1920,\r\n      useWebWorker: true,\r\n    };\r\n    const compressedFile = await imageCompression(file, options);\r\n    console.log(compressedFile);\r\n    setFieldValue(\"image\", compressedFile);\r\n  };\r\n\r\n  const handleSubmit = async (values) => {\r\n    const formData = new FormData();\r\n\r\n    for (const key in values) {\r\n      if (key === \"categories\") {\r\n        console.log(values[key]);\r\n        values[key].map((catId) => {\r\n          return formData.append(key, catId);\r\n        });\r\n      } else {\r\n        formData.append(key, values[key]);\r\n      }\r\n    }\r\n    // console.log(\"FORMDATA\", formData.get(\"image\"));\r\n    console.log(formData);\r\n    const response = await CreateOneCar(formData);\r\n    if (response.status === 200) {\r\n      alert(\"Car Created Successfully\");\r\n      window.location.reload();\r\n    } else {\r\n      alert(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Formik\r\n        initialValues={{\r\n          name: \"\",\r\n          image: null,\r\n          price: \"\",\r\n          brand: \"\",\r\n          transmission: \"\",\r\n          fuel: \"\",\r\n          doors: \"\",\r\n          categories: [],\r\n        }}\r\n        validationSchema={validationSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {() => (\r\n          <Form className=\"signup-form\">\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"name\">Car Name:</label>\r\n              <Field type=\"text\" name=\"name\" id=\"carName\" />\r\n              <ErrorMessage name=\"name\" component=\"div\" className=\"error\" />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"image\">Image:</label>\r\n              <Field name=\"image\">\r\n                {({ form, field }) => {\r\n                  const { setFieldValue } = form;\r\n                  return (\r\n                    <input\r\n                      type=\"file\"\r\n                      required\r\n                      onChange={(e) => handleIcon(e, setFieldValue)}\r\n                    />\r\n                  );\r\n                }}\r\n              </Field>{\" \"}\r\n              <ErrorMessage name=\"image\" className=\"error\" />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"price\">Price:</label>\r\n              <Field type=\"number\" name=\"price\" id=\"price\" />\r\n              <ErrorMessage name=\"price\" component=\"div\" className=\"error\" />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"brand\">Brand:</label>\r\n              <Field as=\"select\" name=\"brand\" id=\"brand\">\r\n                <option value=\"\">Select Brand</option>\r\n                {brands.map((brand) => (\r\n                  <option key={brand} value={brand}>\r\n                    {brand}\r\n                  </option>\r\n                ))}\r\n              </Field>\r\n              <ErrorMessage name=\"brand\" component=\"div\" className=\"error\" />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"categories\">Categories:</label>\r\n              <Field as=\"select\" multiple name=\"categories\" id=\"categories\">\r\n                {categories.map((category, index) => (\r\n                  <option key={category.name} value={category.id}>\r\n                    {category.name}\r\n                  </option>\r\n                ))}\r\n              </Field>\r\n              <ErrorMessage\r\n                name=\"categories\"\r\n                component=\"div\"\r\n                className=\"error\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"transmission\">Transmission:</label>\r\n              <Field as=\"select\" name=\"transmission\" id=\"transmission\">\r\n                <option value=\"\">Select Transmission</option>\r\n                {transmissions.map((transmission) => (\r\n                  <option key={transmission} value={transmission}>\r\n                    {transmission}\r\n                  </option>\r\n                ))}\r\n              </Field>\r\n              <ErrorMessage\r\n                name=\"transmission\"\r\n                component=\"div\"\r\n                className=\"error\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"fuel\">Fuel Type:</label>\r\n              <Field as=\"select\" name=\"fuel\" id=\"fuelType\">\r\n                <option value=\"\">Select Fuel Type</option>\r\n                {fuelTypes.map((fuelType) => (\r\n                  <option key={fuelType} value={fuelType}>\r\n                    {fuelType}\r\n                  </option>\r\n                ))}\r\n              </Field>\r\n              <ErrorMessage name=\"fuel\" component=\"div\" className=\"error\" />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"doors\">Number of Doors:</label>\r\n              <Field type=\"number\" name=\"doors\" id=\"doors\" />\r\n              <ErrorMessage name=\"doors\" component=\"div\" className=\"error\" />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <button type=\"submit\">Create</button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateCar;\r\n","import React from \"react\";\r\nimport CreateCar from \"../components/CreateCar/CreateCar\";\r\n\r\nconst AddCar = () => {\r\n  return (\r\n    <div>\r\n      <CreateCar />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCar;\r\n"],"names":["validationSchema","Yup","shape","name","required","price","brand","transmission","fuel","doors","brands","categories","id","createdAt","updatedAt","transmissions","fuelTypes","handleIcon","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","setFieldValue","file","options","compressedFile","wrap","_context","prev","next","target","files","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","sent","console","log","stop","_x","_x2","apply","arguments","handleSubmit","_ref2","_callee2","values","formData","_loop","key","_context3","FormData","_context2","map","catId","append","t0","keys","t1","done","value","delegateYield","CreateOneCar","status","alert","window","location","reload","_x3","_jsx","className","children","Formik","initialValues","image","onSubmit","_jsxs","Form","htmlFor","Field","type","ErrorMessage","component","_ref3","form","field","onChange","as","multiple","category","index","fuelType","CreateCar"],"sourceRoot":""}